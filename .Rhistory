)
}
plottingFrame <- data.frame(
X     = c(0, seq(0.01, 1000, length.out = 100000)),
Log10 = c(NA, log10(seq(0.01, 1000, length.out = 100000))),
IHS   = c(0, transMod(seq(0.01, 1000, length.out = 100000)))
)
plottingFrame$mask <- 1
plottingFrame[plottingFrame$X == 0,]$mask <- 0
plottingFrame[plottingFrame$X == 0,]$X <- 0.00001
plottingFrame.melt <- plottingFrame %>%
gather(Scale, Y, Log10:IHS, -mask)
hackPoint <- data.frame(X = 0.00001,
Y = 0,
Scale = "IHS",
mask = 0)
#ggplot2::geom_point(size=3, shape=21, show.legend=T, colour = "black", fill = "white", alpha = .9, stroke = 1) +
plt <- ggplot(plottingFrame.melt, aes(x=X, y=Y, color = Scale)) +
geom_line() +
geom_point(hackPoint, mapping = aes(x=X, y=Y, color = Scale), inherit.aes = FALSE) +
geom_hline(yintercept = 0, lty = 2, ltw = 1) +
facet_grid(.~mask, scales="free_x", space="free_x") +
scale_x_log10(breaks=c(0.00001,  0.01, 0.1, 1, 10, 100),
labels=c("0.00",   0.01, 0.1, 1, 10, 100)) +
scale_color_manual(values = c(
"IHS"   = "gray",
"Log10" = "black"
)) +
ggtitle("Comparison of Transformations") +
theme_apa() +
theme(strip.background = element_blank(),
strip.text = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
text = element_text(size=16)) +
annotation_logticks2(sides="b", data = data.frame(X= NA, mask = 1)) +
ylim(c(-2, 2)) +
labs(x = "Untransformed Value",
y = "Transformed Value")
plt <- plt +
ggplot2::theme(axis.text.x = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.text.y = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.ticks.length = unit(-0.15, "cm"),
axis.title.x = element_text(face = "bold", margin = unit(c(-0.1, 0, 0, 0), "cm")),
axis.title.y = element_text(face = "bold", margin = unit(c(0, -0.1, 0, 0), "cm")))
library(grid)
gt = ggplot_gtable(ggplot_build(plt))
gt$widths[5] = 5*gt$widths[5]
grid.draw(gt)
#plt
# Shawn Gilroy (2019) - MIT
# Louisiana State University
library(ggplot2)
transMod <- function(x, theta = 0.5) {
log((x * theta) + ((theta^2) * (x^2) + 1)^0.5)/log(10)
}
annotation_logticks2 <- function(base = 10, sides = "bl", scaled = TRUE, short = unit(0.1, "cm"),
mid = unit(0.2, "cm"), long = unit(0.3, "cm"), colour = "black",
size = 0.5, linetype = 1, alpha = 1, data =data.frame(x = NA), color = NULL, ...) {
if (!is.null(color)) {
colour <- color
}
layer(
data = data,
mapping = NULL,
stat = StatIdentity,
geom = GeomLogticks,
position = PositionIdentity,
show.legend = FALSE,
inherit.aes = FALSE,
params = list(
base = base,
sides = sides,
scaled = scaled,
short = short,
mid = mid,
long = long,
colour = colour,
size = size,
linetype = linetype,
alpha = alpha,
...
)
)
}
plottingFrame <- data.frame(
X     = c(0, seq(0.01, 1000, length.out = 100000)),
Log10 = c(NA, log10(seq(0.01, 1000, length.out = 100000))),
IHS   = c(0, transMod(seq(0.01, 1000, length.out = 100000)))
)
plottingFrame$mask <- 1
plottingFrame[plottingFrame$X == 0,]$mask <- 0
plottingFrame[plottingFrame$X == 0,]$X <- 0.00001
plottingFrame.melt <- plottingFrame %>%
gather(Scale, Y, Log10:IHS, -mask)
hackPoint <- data.frame(X = 0.00001,
Y = 0,
Scale = "IHS",
mask = 0)
#ggplot2::geom_point(size=3, shape=21, show.legend=T, colour = "black", fill = "white", alpha = .9, stroke = 1) +
plt <- ggplot(plottingFrame.melt, aes(x=X, y=Y, color = Scale)) +
geom_line() +
geom_point(hackPoint, mapping = aes(x=X, y=Y, color = Scale), inherit.aes = FALSE) +
geom_hline(yintercept = 0, lty = 2, ltw = .5) +
facet_grid(.~mask, scales="free_x", space="free_x") +
scale_x_log10(breaks=c(0.00001,  0.01, 0.1, 1, 10, 100),
labels=c("0.00",   0.01, 0.1, 1, 10, 100)) +
scale_color_manual(values = c(
"IHS"   = "gray",
"Log10" = "black"
)) +
ggtitle("Comparison of Transformations") +
theme_apa() +
theme(strip.background = element_blank(),
strip.text = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
text = element_text(size=16)) +
annotation_logticks2(sides="b", data = data.frame(X= NA, mask = 1)) +
ylim(c(-2, 2)) +
labs(x = "Untransformed Value",
y = "Transformed Value")
plt <- plt +
ggplot2::theme(axis.text.x = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.text.y = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.ticks.length = unit(-0.15, "cm"),
axis.title.x = element_text(face = "bold", margin = unit(c(-0.1, 0, 0, 0), "cm")),
axis.title.y = element_text(face = "bold", margin = unit(c(0, -0.1, 0, 0), "cm")))
library(grid)
gt = ggplot_gtable(ggplot_build(plt))
gt$widths[5] = 5*gt$widths[5]
grid.draw(gt)
#plt
# Shawn Gilroy (2019) - MIT
# Louisiana State University
library(ggplot2)
transMod <- function(x, theta = 0.5) {
log((x * theta) + ((theta^2) * (x^2) + 1)^0.5)/log(10)
}
annotation_logticks2 <- function(base = 10, sides = "bl", scaled = TRUE, short = unit(0.1, "cm"),
mid = unit(0.2, "cm"), long = unit(0.3, "cm"), colour = "black",
size = 0.5, linetype = 1, alpha = 1, data =data.frame(x = NA), color = NULL, ...) {
if (!is.null(color)) {
colour <- color
}
layer(
data = data,
mapping = NULL,
stat = StatIdentity,
geom = GeomLogticks,
position = PositionIdentity,
show.legend = FALSE,
inherit.aes = FALSE,
params = list(
base = base,
sides = sides,
scaled = scaled,
short = short,
mid = mid,
long = long,
colour = colour,
size = size,
linetype = linetype,
alpha = alpha,
...
)
)
}
plottingFrame <- data.frame(
X     = c(0, seq(0.01, 1000, length.out = 100000)),
Log10 = c(NA, log10(seq(0.01, 1000, length.out = 100000))),
IHS   = c(0, transMod(seq(0.01, 1000, length.out = 100000)))
)
plottingFrame$mask <- 1
plottingFrame[plottingFrame$X == 0,]$mask <- 0
plottingFrame[plottingFrame$X == 0,]$X <- 0.00001
plottingFrame.melt <- plottingFrame %>%
gather(Scale, Y, Log10:IHS, -mask)
hackPoint <- data.frame(X = 0.00001,
Y = 0,
Scale = "IHS",
mask = 0)
#ggplot2::geom_point(size=3, shape=21, show.legend=T, colour = "black", fill = "white", alpha = .9, stroke = 1) +
plt <- ggplot(plottingFrame.melt, aes(x=X, y=Y, color = Scale)) +
geom_line() +
geom_point(hackPoint, mapping = aes(x=X, y=Y, color = Scale), inherit.aes = FALSE) +
geom_hline(yintercept = 0, lty = 2, ltw = .5) +
facet_grid(.~mask, scales="free_x", space="free_x") +
scale_x_log10(breaks=c(0.00001,  0.01, 0.1, 1, 10, 100),
labels=c("0.00",   0.01, 0.1, 1, 10, 100)) +
scale_color_manual(values = c(
"IHS"   = "gray",
"Log10" = "black"
)) +
ggtitle("Comparison of Transformations") +
theme_apa() +
theme(strip.background = element_blank(),
strip.text = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
text = element_text(size=16)) +
annotation_logticks2(sides="b", data = data.frame(X= NA, mask = 1)) +
ylim(c(-2, 2)) +
labs(x = "Untransformed Value",
y = "Transformed Value")
plt <- plt +
ggplot2::theme(axis.text.x = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.text.y = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.ticks.length = unit(-0.15, "cm"),
axis.title.x = element_text(face = "bold", margin = unit(c(-0.1, 0, 0, 0), "cm")),
axis.title.y = element_text(face = "bold", margin = unit(c(0, -0.1, 0, 0), "cm")))
library(grid)
gt = ggplot_gtable(ggplot_build(plt))
gt$widths[5] = 5*gt$widths[5]
grid.draw(gt)
#plt
# Shawn Gilroy (2019) - MIT
# Louisiana State University
library(ggplot2)
transMod <- function(x, theta = 0.5) {
log((x * theta) + ((theta^2) * (x^2) + 1)^0.5)/log(10)
}
annotation_logticks2 <- function(base = 10, sides = "bl", scaled = TRUE, short = unit(0.1, "cm"),
mid = unit(0.2, "cm"), long = unit(0.3, "cm"), colour = "black",
size = 0.5, linetype = 1, alpha = 1, data =data.frame(x = NA), color = NULL, ...) {
if (!is.null(color)) {
colour <- color
}
layer(
data = data,
mapping = NULL,
stat = StatIdentity,
geom = GeomLogticks,
position = PositionIdentity,
show.legend = FALSE,
inherit.aes = FALSE,
params = list(
base = base,
sides = sides,
scaled = scaled,
short = short,
mid = mid,
long = long,
colour = colour,
size = size,
linetype = linetype,
alpha = alpha,
...
)
)
}
plottingFrame <- data.frame(
X     = c(0, seq(0.01, 1000, length.out = 100000)),
Log10 = c(NA, log10(seq(0.01, 1000, length.out = 100000))),
IHS   = c(0, transMod(seq(0.01, 1000, length.out = 100000)))
)
plottingFrame$mask <- 1
plottingFrame[plottingFrame$X == 0,]$mask <- 0
plottingFrame[plottingFrame$X == 0,]$X <- 0.00001
plottingFrame.melt <- plottingFrame %>%
gather(Scale, Y, Log10:IHS, -mask)
hackPoint <- data.frame(X = 0.00001,
Y = 0,
Scale = "IHS",
mask = 0)
#ggplot2::geom_point(size=3, shape=21, show.legend=T, colour = "black", fill = "white", alpha = .9, stroke = 1) +
plt <- ggplot(plottingFrame.melt, aes(x=X, y=Y, color = Scale)) +
geom_line() +
geom_point(hackPoint, mapping = aes(x=X, y=Y, color = Scale), inherit.aes = FALSE) +
geom_hline(yintercept = 0, lty = 2, ltw = .5) +
facet_grid(.~mask, scales="free_x", space="free_x") +
scale_x_log10(breaks=c(0.00001,  0.01, 0.1, 1, 10, 100),
labels=c("0.00",   0.01, 0.1, 1, 10, 100)) +
scale_color_manual(values = c(
"IHS"   = "black",
"Log10" = "gray"
)) +
ggtitle("Comparison of Transformations") +
theme_apa() +
theme(strip.background = element_blank(),
strip.text = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
text = element_text(size=16)) +
annotation_logticks2(sides="b", data = data.frame(X= NA, mask = 1)) +
ylim(c(-2, 2)) +
labs(x = "Untransformed Value",
y = "Transformed Value")
plt <- plt +
ggplot2::theme(axis.text.x = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.text.y = element_text(size=12, margin = unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.ticks.length = unit(-0.15, "cm"),
axis.title.x = element_text(face = "bold", margin = unit(c(-0.1, 0, 0, 0), "cm")),
axis.title.y = element_text(face = "bold", margin = unit(c(0, -0.1, 0, 0), "cm")))
library(grid)
gt = ggplot_gtable(ggplot_build(plt))
gt$widths[5] = 5*gt$widths[5]
grid.draw(gt)
#plt
kMod <-  transMod(max(dataFrameMod$y)) -  transMod(min(dataFrameMod$y))  + 0.5
hurshMod <- nls(transMod(y) ~ transMod(q0) + kMod * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod)
#summary(hurshMod)
kMod2 <-  transMod(max(dataFrameMod2$y)) -  transMod(min(dataFrameMod2$y))  + 0.5
hurshMod2 <- nls(transMod(y) ~ transMod(q0) + kMod2 * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod2)
#summary(hurshMod2)
kKeep <-  transMod(max(dataFrameKeep$y)) -  transMod(min(dataFrameKeep$y))  + 0.5
hurshKeep <- nls(transMod(y) ~ transMod(q0) + kKeep * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameKeep)
#summary(hurshKeep)
par(mfrow = c(1, 3))
plot(dataFrameKeep$x, transMod(dataFrameKeep$y),
main = "Zero Consumption Included",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "Consumption (Log10-like Transformed)",
xlab = "",
log = "x")
lines(dataFrameKeep$x, predict(hurshKeep))
text(.1, 0,
paste0("Q0: ", round(coef(hurshKeep)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshKeep)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod$x, transMod(dataFrameMod$y),
main = "Zero Consumption Replaced with 0.1",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "Price",
log = "x")
lines(dataFrameMod$x, predict(hurshMod))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod2$x, transMod(dataFrameMod2$y),
main = "Zero Consumption Replaced with 0.01",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "",
log = "x")
lines(dataFrameMod2$x, predict(hurshMod2))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod2)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod2)["alpha"], 6)
),
adj = c(0, 0)
)
kMod <-  transMod(max(dataFrameMod$y)) -  transMod(min(dataFrameMod$y))  + 0.5
hurshMod <- nls(transMod(y) ~ transMod(q0) + kMod * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod)
#summary(hurshMod)
kMod2 <-  transMod(max(dataFrameMod2$y)) -  transMod(min(dataFrameMod2$y))  + 0.5
hurshMod2 <- nls(transMod(y) ~ transMod(q0) + kMod2 * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod2)
#summary(hurshMod2)
kKeep <-  transMod(max(dataFrameKeep$y)) -  transMod(min(dataFrameKeep$y))  + 0.5
hurshKeep <- nls(transMod(y) ~ transMod(q0) + kKeep * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameKeep)
#summary(hurshKeep)
par(mfrow = c(1, 3))
plot(dataFrameKeep$x, transMod(dataFrameKeep$y),
main = "Zero Consumption Included",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "Consumption (Log10-like Transformed)",
xlab = "",
log = "x")
lines(dataFrameKeep$x, predict(hurshKeep))
text(.1, 0,
paste0("Q0: ", round(coef(hurshKeep)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshKeep)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod$x, transMod(dataFrameMod$y),
main = "Zero Consumption Replaced with 0.1",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "Price",
log = "x")
lines(dataFrameMod$x, predict(hurshMod))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod2$x, transMod(dataFrameMod2$y),
main = "Zero Consumption Replaced with 0.01",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "",
log = "x")
lines(dataFrameMod2$x, predict(hurshMod2))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod2)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod2)["alpha"], 6)
),
adj = c(0, 0)
)
dataFrameMod <- data.frame(
x = c(0.5,1.0,1.5,2.0,2.5,3.0,4.0,5.0,10.0,15.0, 20, 50, 100),
y = c(1000,1000,800,800,700,600,500,400,200,100, 50, 10, 0.1)
)
dataFrameMod2 <- data.frame(
x = c(0.5,1.0,1.5,2.0,2.5,3.0,4.0,5.0,10.0,15.0, 20, 50, 100),
y = c(1000,1000,800,800,700,600,500,400,200,100, 50, 10, 0.01)
)
dataFrameKeep <- data.frame(
x = c(0.5,1.0,1.5,2.0,2.5,3.0,4.0,5.0,10.0,15.0, 20, 50, 100),
y = c(1000,1000,800,800,700,600,500,400,200,100, 50, 10, 0.0)
)
kMod <-  transMod(max(dataFrameMod$y)) -  transMod(min(dataFrameMod$y))  + 0.5
hurshMod <- nls(transMod(y) ~ transMod(q0) + kMod * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod)
#summary(hurshMod)
kMod2 <-  transMod(max(dataFrameMod2$y)) -  transMod(min(dataFrameMod2$y))  + 0.5
hurshMod2 <- nls(transMod(y) ~ transMod(q0) + kMod2 * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameMod2)
#summary(hurshMod2)
kKeep <-  transMod(max(dataFrameKeep$y)) -  transMod(min(dataFrameKeep$y))  + 0.5
hurshKeep <- nls(transMod(y) ~ transMod(q0) + kKeep * (exp(-alpha * q0 * x) - 1),
start = list(
q0 = 1000,
alpha = 0.00006
),
data = dataFrameKeep)
#summary(hurshKeep)
par(mfrow = c(1, 3))
plot(dataFrameKeep$x, transMod(dataFrameKeep$y),
main = "Zero Consumption Included",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "Consumption (Log10-like Transformed)",
xlab = "",
log = "x")
lines(dataFrameKeep$x, predict(hurshKeep))
text(.1, 0,
paste0("Q0: ", round(coef(hurshKeep)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshKeep)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod$x, transMod(dataFrameMod$y),
main = "Zero Consumption Replaced with 0.1",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "Price",
log = "x")
lines(dataFrameMod$x, predict(hurshMod))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod)["alpha"], 6)
),
adj = c(0, 0)
)
plot(dataFrameMod2$x, transMod(dataFrameMod2$y),
main = "Zero Consumption Replaced with 0.01",
ylim = c(0, 4),
xlim = xAxisLimits,
ylab = "",
xlab = "",
log = "x")
lines(dataFrameMod2$x, predict(hurshMod2))
text(.1, 0,
paste0("Q0: ", round(coef(hurshMod2)["q0"], 2), "\n",
"Alpha: ", round(coef(hurshMod2)["alpha"], 6)
),
adj = c(0, 0)
)
